#!/bin/env python3
'''
Takes a json as exported by https://terminal.sexy/ and outputs a palette usable
by my Sway theme format
'''

import json
from sys import argv


def decode(file):
    '''
    Decodes a json from a file and returns a dictionary object
    '''
    return json.load(file)


def export(file, content):
    '''
    takes the dictionary object and exports the palette to a file
    '''
    file.write(f''' # vim: ft=swayconfig

set $palette_0    {content['color'][0]}
set $palette_1    {content['color'][1]}
set $palette_2    {content['color'][2]}
set $palette_3    {content['color'][3]}
set $palette_4    {content['color'][4]}
set $palette_5    {content['color'][5]}
set $palette_6    {content['color'][6]}
set $palette_7    {content['color'][7]}
set $palette_8    {content['color'][8]}
set $palette_9    {content['color'][9]}
set $palette_10   {content['color'][10]}
set $palette_11   {content['color'][11]}
set $palette_12   {content['color'][12]}
set $palette_13   {content['color'][13]}
set $palette_14   {content['color'][14]}
set $palette_15   {content['color'][15]}

set $palette_foreground      {content['foreground']}
set $palette_background      {content['foreground']}

set $color_accent   $palette_
set $color_urgent   $palette_



# Decorations             Border                Background           Text                  Indicator            Child Border
client.focused            $palette_blue         $palette_blue        $palette_background   $palette_blue        $palette_blue
client.focused_inactive   $palette_grey_dark    $palette_grey_dark   $palette_foreground   $palette_grey_dark   $palette_grey_dark
client.unfocused          $palette_background   $palette_black       $palette_foreground   $palette_black       $palette_background
client.urgent             $palette_red          $palette_red         $palette_foreground   $palette_red         $palette_red


# Panel
set $panel_transparency   cc
set $panel_foreground     $palette_foreground
set $panel_background     $palette_background$panel_transparency

# Workspaces       Outline                                  Bg                                       Text
set $ws_focused    $palette_blue                          $palette_blue                          $palette_background
set $ws_active     $palette_blue                          $palette_blue                          $palette_background
set $ws_inactive   $palette_background$panel_transparency   $palette_background$panel_transparency   $palette_foreground
set $ws_urgent     $palette_red                             $palette_red                             $palette_background


# Wob
# - absolutely requires colours to be #RRGGBBAA, and doesn't just assume
#   the alpha channel to be FF if ommited, instead refusing to even start
set $wob_opacity FF
set $wob_border      $palette_blue$wob_opacity
set $wob_bar         $palette_blue$wob_opacity
set $wob_background  $palette_background$wob_opacity


# Mako
set $mako_background  $palette_blue
set $mako_text        $palette_background
set $mako_border      $palette_blue


# bemenu
set $bemenu_title_background         $palette_blue
set $bemenu_title_foreground         $palette_background
set $bemenu_filter_background        $palette_background
set $bemenu_filter_foreground        $palette_foreground
set $bemenu_normal_background        $palette_background
set $bemenu_normal_foreground        $palette_foreground
set $bemenu_highlighted_background   $palette_blue
set $bemenu_highlighted_foreground   $palette_background
set $bemenu_selecred_background      $palette_background
set $bemenu_selecred_foreground      $palette_blue
set $bemenu_alternating_background   $palette_background
set $bemenu_alternating_foreground   $palette_blue

''')

def main():
    if len(argv) < 3:
        print(f'expected 3 arguments, got {len(argv)}')
        quit(1)
    fin = open(argv[1])
    fout = open(argv[2], 'w')
    export(fout, decode(fin))
    fin.close()
    fout.close()


if __name__ == '__main__':
    main()
